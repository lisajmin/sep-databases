1. Create a database for the model we built in the example. Create a SQL file that creates the tables and inserts sample data (the questions below will help you create the data). Write queries applying the following scenarios:
http://sqlfiddle.com/#!17/ca86b

  CREATE TABLE guests(
    "id"           INTEGER,
    "first_name"   VARCHAR(32),
    "last_name"    VARCHAR(32),
    "phone_no"     VARCHAR(32),
    "email"        VARCHAR(32),
    "address"      TEXT,

    PRIMARY KEY("id")
  );

  CREATE TABLE rooms(
    "id"           INTEGER,
    "room_no"      INTEGER,
    "floor_no"     INTEGER,
    "price"        DECIMAL(19,2),

    PRIMARY KEY("id")
  );

  CREATE TABLE bookings(
    "id"           INTEGER,
    "guest_id"     INTEGER,
    "room_id"      INTEGER,
    "check_in"     DATE,
    "check_out"    DATE,

    FOREIGN KEY ("guest_id")
    REFERENCES "guests" ("id")
    ON DELETE CASCADE,

    FOREIGN KEY ("room_id")
    REFERENCES "rooms" ("id")
    ON DELETE CASCADE,

    PRIMARY KEY("id")
  );

  INSERT INTO guests
  ("id", "first_name", "last_name")
  VALUES
  ( 1,   'Hermione', 'Granger'),
  ( 2,   'Ronald',   'Weasley'),
  ( 3,   'Luna',     'Lovegood'),
  ( 4,   'Draco',    'Malfoy'),
  ( 5,   'Padma',    'Patil'),
  ( 6,   'Neville',  'Longbottom'),
  ( 7,   'Cedric',   'Diggory'),
  ( 8,   'Cho',      'Chang'),
  ( 9,   'Dean',     'Thomas');

  INSERT INTO rooms
  ("id", "room_no", "floor_no", "price")
  VALUES
  (11, 1, 1, 100.99),
  (12, 2, 1, 99.00),
  (13, 3, 1, 89.00),
  (14, 4, 2, 120.00),
  (15, 5, 2, 99.99),
  (16, 6, 2, 9.99);

  INSERT INTO bookings
  ("id", "guest_id", "room_id", "check_in", "check_out")
  VALUES
  (1, 1, 11, '2018-01-02', '2018-01-04'),
  (2, 1, 12, '2018-01-02', '2018-01-04'),
  (3, 2, 13, '2018-01-02', '2018-01-04'),
  (4, 2, 13, '2018-02-02', '2018-02-04'),
  (5, 2, 13, '2018-03-03', '2018-03-03'),
  (6, 8, 13, '2018-01-13', '2018-01-21'),
  (7, 5, 13, '2018-02-13', '2018-02-21'),
  (8, 4, 13, '2018-03-13', '2018-03-21'),
  (9, 2, 14, '2018-02-02', '2018-02-04');


  Find a guest who exists in the database and has not booked a room.

    SELECT guests.first_name, guests.last_name
    FROM guests
    LEFT JOIN bookings ON bookings.guest_id = guests.id
    WHERE bookings.guest_id IS NULL;

    first_name	 last_name
    Luna	       Lovegood
    Neville	     Longbottom
    Cedric	     Diggory
    Dean	       Thomas


  Find bookings for a guest who has booked two rooms for the same dates.

    SELECT rooms.room_no, bookings.check_in, bookings.check_out, guests.first_name, guests.last_name
    FROM guests
    JOIN bookings ON bookings.guest_id = guests.id
    JOIN rooms ON rooms.id = bookings.room_id
    JOIN (
    SELECT bookings.check_in, bookings.guest_id, COUNT(bookings.check_in) AS count
    FROM bookings
    GROUP BY bookings.check_in, bookings.guest_id
    HAVING COUNT(bookings.check_in) = 2
    ) AS two_bookings ON two_bookings.guest_id = guests.id
    WHERE two_bookings.guest_id = bookings.guest_id AND two_bookings.check_in = bookings.check_in;

    room_no	  check_in	   check_out	  first_name	last_name
    1	        2018-01-02	 2018-01-04	  Hermione	  Granger
    2	        2018-01-02	 2018-01-04	  Hermione	  Granger
    3	        2018-02-02	 2018-02-04	  Ronald	    Weasley
    4	        2018-02-02	 2018-02-04	  Ronald	    Weasley


  Find bookings for a guest who has booked one room several times on different dates.

  SELECT rooms.room_no, bookings.check_in, bookings.check_out, guests.first_name, guests.last_name
  FROM bookings
  JOIN guests ON bookings.guest_id = guests.id
  JOIN rooms ON bookings.room_id = rooms.id
  JOIN(
    SELECT bookings.room_id, guests.first_name, guests.last_name, COUNT(bookings.check_in) AS times_booked
    FROM guests
    JOIN bookings ON bookings.guest_id = guests.id
    GROUP BY bookings.room_id, guests.first_name, guests.last_name
    HAVING COUNT(bookings.check_in) > 1
    ) AS multi_bookings on bookings.room_id = multi_bookings.room_id
  WHERE multi_bookings.first_name = guests.first_name;

  room_no	  check_in	  check_out	  first_name	 last_name
  3	        2018-01-02	2018-01-04	Ronald	     Weasley
  3	        2018-02-02	2018-02-04	Ronald	     Weasley
  3	        2018-03-03	2018-03-03	Ronald	     Weasley


  Count the number of unique guests who have booked the same room.

    SELECT bookings.room_id, COUNT(DISTINCT bookings.guest_id) AS number_of_guests
    FROM bookings
    JOIN guests ON bookings.guest_id = guests.id
    GROUP BY bookings.room_id;

    room_id	 number_of_guests
    11	     3
    12       1
    13	     4
    16	     2

2. Design a data model for students and the classes they have taken. The model should include the students' grades for a given class.

Image is attached.

3. Build a database for the students/classes data model. Create a SQL file that creates the tables and inserts sample data (the questions below will help you create the data). Write queries for the following data:
http://sqlfiddle.com/#!17/bb0ae

  CREATE TABLE students(
    "id"           INTEGER,
    "name"         VARCHAR(32),

    PRIMARY KEY("id")
  );

  CREATE TABLE classes(
    "id"           INTEGER,
    "name"         VARCHAR(32),

    PRIMARY KEY("id")
  );

  CREATE TABLE schedules(
  "id"           INTEGER,
  "class_id"     INTEGER,
  "student_id"   INTEGER,
  "grade"        VARCHAR(32),

  FOREIGN KEY ("class_id")
    REFERENCES "classes" ("id")
    ON DELETE CASCADE,

  FOREIGN KEY ("student_id")
    REFERENCES "students" ("id")
    ON DELETE CASCADE,

  PRIMARY KEY("id")
  );

  INSERT INTO students
    ("id", "name")
    VALUES
    ( 1,   'Hermione Granger'),
    ( 2,   'Ronald Weasley'),
    ( 3,   'Luna Lovegood'),
    ( 4,   'Draco Malfoy'),
    ( 5,   'Padma Patil'),
    ( 6,   'Neville Longbottom'),
    ( 7,   'Cedric Diggory'),
    ( 8,   'Cho Chang'),
    ( 9,   'Dean Thomas');

  INSERT INTO classes
    ("id", "name")
    VALUES
    (11, 'Chemistry'),
    (12, 'World History'),
    (13, 'English'),
    (14, 'Physical Education'),
    (15, 'Biology'),
    (16, 'Introduction to Ceramics'),
    (17, 'Calculus'),
    (18, 'Computer Science'),
    (19, 'Finger Painting');

  INSERT INTO schedules
    ("id", "student_id", "class_id", "grade")
    VALUES
    (1, 1, 19, 'A'),
    (2, 2, 19, 'A'),
    (3, 3, 19, 'B'),
    (4, 4, 19, 'A'),
    (5, 5, 19, 'C'),
    (6, 6, 19, 'F'),
    (7, 7, 19, 'A'),
    (8, 8, 19, 'A'),
    (9, 9, 19, 'C'),
    (10, 1, 18, 'A'),
    (11, 1, 17, 'A'),
    (12, 1, 16, 'A'),
    (13, 1, 15, 'A'),
    (14, 1, 14, 'A'),
    (15, 1, 13, 'A'),
    (16, 1, 12, 'A'),
    (17, 1, 11, 'A');


   All students who have taken a particular class.

    SELECT classes.name AS class_name, students.name AS student_name
    FROM students
    JOIN schedules ON schedules.student_id = students.id
    JOIN classes ON schedules.class_id = classes.id
    WHERE classes.name = 'Finger Painting';

    class_name	      student_name
    Finger Painting	  Hermione Granger
    Finger Painting	  Ronald Weasley
    Finger Painting	  Luna Lovegood
    Finger Painting	  Draco Malfoy
    Finger Painting	  Padma Patil
    Finger Painting	  Neville Longbottom
    Finger Painting	  Cedric Diggory
    Finger Painting	  Cho Chang
    Finger Painting	  Dean Thomas



  The number of each grade (using letter grades A-F) earned in a particular class.

    SELECT schedules.grade, COUNT(schedules.grade)
    FROM students
    JOIN schedules ON schedules.student_id = students.id
    JOIN classes ON schedules.class_id = classes.id
    WHERE classes.name = 'Finger Painting'
    GROUP BY schedules.grade;

    grade	count
    A	    5
    B	    1
    C	    2
    F	    1

  Class names and the total number of students who have taken each class in the list.

    SELECT classes.name, COUNT(schedules.student_id) AS number_of_students
    FROM classes
    JOIN schedules ON schedules.class_id = classes.id
    GROUP BY classes.name;

    name	                    number_of_students
    Physical Education	      1
    Chemistry	                1
    Computer Science	        1
    Calculus	                1
    Finger Painting	          9
    World History	            1
    English	                  1
    Introduction to Ceramics	1
    Biology	                  1


  The class taken by the largest number of students.

    SELECT classes.name, COUNT(schedules.student_id) AS number_of_students
    FROM classes
    JOIN schedules ON schedules.class_id = classes.id
    GROUP BY classes.name
    ORDER BY number_of_students DESC LIMIT 1;

    name	             number_of_students
    Finger Painting	   9
